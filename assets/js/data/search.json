[ { "title": "Playing with Azure WebJobs", "url": "/posts/playing-with-azure-webjobs/", "categories": "software development, web", "tags": "azure, asp.net, backend", "date": "2022-05-06 12:45:30 +0200", "snippet": "In case you were following my posts, you are aware about my project Days From Today. It’s a port of my Windows app which is much more functional, but it’s still only a Windows app and I wanted my web version to be as functional as a Windows app. This time I tried to add email reminders about events.So, the Windows app has a functionality that it can notify you about your events with a scheduled notification. This is great but as I noticed, I’m sitting by my PC 24/7 and this means I might miss some notifications. To avoid missing some important event notification, I had an idea to have my web version of the app send an email reminder for an event. I coded the CRUD operations to subscribe for event reminder emails, integrated an email sending service and it all worked nice and I was happy :)Then, I needed my web app to do this on a schedule. Each day check if there’s any event with a reminder and send an email if needed. I learned about Azure WebJobs and Function Apps. Created such a WebJob, it worked and I was still happy. Then I noticed WebJob triggers don’t work in a free-tier app. Ok, I was ready to cancel everything, as I don’t have intention to pay anything for this hobby project. Then I found this blog post and found out there’s a workaround to this limitation. So I created a Function App which would run on a schedule and trigger my WebJob which would send emails. It worked and I was happy :)Then, I noticed Function App requires Azure Storage account. I checked its pricing immediatelly and noticed there’s no free storage. As little as it could be, anything higher than 0 is too expensive for this app. This was a moment I realized it’s not worth it. I was anyway hesitant to add many services to Azure and then live in fear of unexpected costs. So the app is back to it’s initial functionality, calculating days from today.At the end, I’m not happy I had to shut it down, but I’m not sad either. I learned quite a lot during these two days of hobby development. It’s sad that Azure has such limitations, I’m sure they could have such functionality which doesn’t cost anything if only they provided it. Probably they don’t think about this simple use cases as it’s not something production apps need. Anyway, email reminders will have to wait for better times when Azure would provide free scheduled background tasks." }, { "title": "Side projects (sometimes) pay off", "url": "/posts/side-projects-pay-off/", "categories": "software development, node.js", "tags": "node.js, backend, software development", "date": "2022-02-22 11:11:39 +0100", "snippet": "Having a side project every now and then is beneficial in many ways. Recently I had such positive experience from some of my side projects that are more than five years old. My manager asked me “Hey do you have some node.js experience?” and it was such a good feeling to answer “yes”.As a reader of my blog, you may have noticed I’m primarily a .NET developer, but during my career and in my spare time, I tried various technologies. One of those is node.js and even though it’s more than five years since I worked on it, I learned some concepts and still have the knowledge to work on a basic node.js app.This moment felt like a reward for something I even forgot I did. Something I did out of curiosity and fun and never expected to get credits for it, especially this far in the future. It motivated me to write this post to remember myself that trying new stuff, going out of a comfort zone, learning something that interests you, some day may pay off." }, { "title": "My first iOS development experience", "url": "/posts/my-first-ios-development-experience/", "categories": "software development, xamarin", "tags": "iOS, xamarin, software development", "date": "2021-01-28 11:34:43 +0100", "snippet": "Due to some circumstances, I came in a possession of a Mac mini. This meant only one thing - I had to create an iOS app. My way of thinking was, let’s go completely native - Swift can’t be that hard to learn. Create WatchOS app - I miss a lot of functionality on the Apple Watch. After some attempts and giving up I turned to the good old C# and Xamarin.Forms.iOS native developmentYes, my idea was to create a basic app and was thinking just create a native app from the XCode template, and it shouldn’t be too hard to learn Swift and SwiftUI in the process. The thing is, it’s neither so easy and with my spare time very limited these days, I couldn’t afford to go this way. In addition, my Mac mini is quite slow, and made the developemt (attempt) painfully slow.Xamarin.FormsOk, so I concluded it’s better to go the faster way. Using my primary programming language and my primary development PC should speed things up. For a basic app I wanted to created Xamarin.Forms was a good fit, I didn’t miss any functionality from native development. To be fair, the app I want to create was a port of one of my Windows Phone apps and I could reuse most of the bussiness logic code - speed++.Using Xamarin.Forms for iOS on a Windows machine works. That’s all :) it works, job can be done but there are a lot of obstacles a native development doesn’t have. Connection to a Mac agent is unstable, often needs a machine restart and just like that you spend 10 minutes and work flow. Deploying to a simulator or a device works good enough, it is a bit slow, but doesn’t get you nervous.OutcomeI created a complete app, but didn’t submit it to the store due to it not being production ready, and my wish not to deal with everything that production involves - users, expectations, fixes and maintenance. The app required to have a push notification server, so I reused and expanded my existing server used for push notification with APNS support. Of course, since I didn’t work on the server for a few years, Heroku wanted me to migrate to the new stack before I could make new deployments.Since I’m an iPhone, Apple Watch and iPad user, and I feel the need to be able to make an app for my own needs, now that I can do it the feeling is great. The unexpected work on the server also refreshed my Node.js knowledge and I felt satisfaction upon successful migration of the server." }, { "title": "My first ASP.NET Core MVC app", "url": "/posts/my-first-asp-net-core-mvc-app/", "categories": "software development, web", "tags": "software development, web", "date": "2020-07-09 00:23:50 +0200", "snippet": "As you might have noticed I created a Windows application to calculate time span between two dates Event Timing. Since I’m not always sitting by my Windows PC, I got the need to have this little calculator app available on the web. This evening the web app went from idea to production. The most important motivation for this application was to quickly calculate how old is my baby in days. For this my Event Timing app worked great, with notifications, live tiles and all that, but with one major limitation that it was only available on Windows. Now since I’m spending more time with the baby, I’m not that much by the PC anymore. My phone is always near and I concluded if my application was available as a web app I could easily check the baby’s age in days wherever I am. This and my long time desire to try make an ASP.NET web application made me spend a few hours this evening to create this application.Known limitations: It doesn’t support different time zones. It always calculates based on UTC time. Date format is not based on user’s region. Date format in the input field is formatted by users browser. The date in calculated page is formated in dd/MM/yyyy format as I think most of the people use that format.[UPDATE]The application is no longer available as I didn’t want to start an Azure subscription. I’m sorry to end it like this, but the application was never meant to be maintained, or improved. It served its purpose of getting me learn a bit about the technology.[UPDATE 2]Application is live again. I decided to start an Azure subscription and avoid unnecessary costs. The app is available here" }, { "title": "Blocked? Prepare to unblock", "url": "/posts/blocked-prepare-to-unblock/", "categories": "software development, opinions", "tags": "software development, opinions", "date": "2020-07-05 22:15:04 +0200", "snippet": "Many times during my career I’ve been blocked from completing my work. Be it feature implementation, bug fix or some kind of software migration I couldn’t finish until someone else does their job first. What to do during this time? I learned that you can’t just say “I’m blocked and can’t do anything until I get unblocked” because there’s so much you can do to prepare for when you get unblocked. Let’s say you are implementing a new feature and need to get the data from server. This new feature is also new for server and it doesn’t have the API you need right now. Instead of waiting or annoy server developers with constant pinging you could prepare for the moment API gets implemented. The goal is to have the least possible amount of work remaining to complete your feature. In this example you could use the time to create tests for your feature before implementation (remember the TDD?). While writing tests you’ll probably need to make some mock data. With mock data you can already continue implementing the feature and get it close to completion. With this approach not only you’ll be faster to complete the feature once you get unblocked, but your implementation will already have covering tests." }, { "title": "Data affects algorithm performance", "url": "/posts/data-affects-algorithm-performance/", "categories": "software development, opinions", "tags": "software development, opinions", "date": "2019-09-25 15:37:59 +0200", "snippet": "The title is so obvious that you’re probably wondering why I had to write a blog post about it. I’m also surprised how obvious truths must be repeated in order to comply with them. I’ll explain what inspired me.OptimizeRecently I got a task to optimize a piece of software I worked on. This was a part of code I inherited and wasn’t so familiar with. In short, it had to process a list of data input, compute something and save the information to the database. So simple, right? Of course, it had some complicated computation in each iteration, but to my surprise that wasn’t the bottleneck. The bottlneck was in the storing and retrieving data from database. It was done in each iteration because the previous one affected computation of the next one. So a developer before me decided to use the database as a single point of truth and on each iteration he saved the computed data, and retreived it again in the next iteration. For a short while I was angry with this unknown suspect and couldn’t understand why would he do it like that. Then I realized, he couldn’t see the actual slowness of the application because his database was probably almost empty. The actual customer has a lot of data in it, so in each iteration there’s a lot of data to send and retrieve from database. That’s when I got a bit of understanding for the guy, but also reminded myself, next time when I’m trying to write optimal code, have in mind the actual data might affect its performance." }, { "title": "An Excel interop trick", "url": "/posts/an-excel-interop-trick/", "categories": "software development, windows", "tags": "software development, windows", "date": "2019-05-09 14:10:04 +0200", "snippet": "Yesterday I had a nice little evening spent with a silent failure of my program. The program needed to create an Excel document, save it and export as a PDF. It should also run periodically and automatically, so as a scheduled task right? Yes, and it works fine for me on my Windows 10 PC, but on clients Windows Server 2012? Not really.What’s wrong?First thing I saw is that Excel file was created, but PDF wasn’t. The Excel file was still in use by an Excel program in background. My scheduled task was still shown as running, and log files didn’t have any new lines after creating Excel file. It meant export to PDF method failed, but why?I browsed the web and found a lot of complaints and users telling that you can’t automate Excel with a scheduled task without a user logged in. It made sense, but my task could open Excel, generate a file and save it. It’s just that when it tried to export it to a PDF it halted. And only when ran unattended, meaning when no user is logged in.The printerI can’t remember all the things I tried to workaround this problem, but after a few hours I got to this StackOverflow question. There was that one answer that pointed that Excel is not able to print to PDF and I should set Microsoft XPS document writer as a default printer. So I tried that and it worked! These kind of problems make you feel alive and put you out of your comfort zone writing those lines of code :)" }, { "title": "There&#39;s no privacy on social networks", "url": "/posts/there-s-no-privacy-on-social-networks/", "categories": "personal, opinions", "tags": "personal, opinions", "date": "2018-01-18 10:32:40 +0100", "snippet": "This might sound so obvious to people who know how the Internet works, but I think to quite a lot of people this might come as a shock. All the privacy settings on social networks and forums are worthless. I’ll explain why.Whenever you share a thought or a picture on the web, remember that it can be reshared by anyone else who has access to it. No privacy setting can prevent another person from taking a screenshot or copy-paste your post. Remember Snapchat’s revolutionary feature of autodestroy messages? Users quickly learned to bypass it with a simple screenshot.This is also a reason I don’t believe in closed social networks and rather share my thoughts publicly here and on my Twitter account. I don’t want to have a false belief that my stuff is protected by a social network. And as a consequence I don’t share anything I’m not comfortable to share with all the public. Remember this next time you want to share something more private and find yourself adjusting the privacy settings of your post." }, { "title": "Be careful with cache", "url": "/posts/be-careful-with-cache/", "categories": "software development, opinions", "tags": "software development, opinions", "date": "2017-11-29 15:49:03 +0100", "snippet": "There’s a well known saying that goes like this: There are only two hard things in Computer Science: cache invalidation and naming things *. This is a post about the first one.Today I experienced a cache invalidation issue where I was presented with cached data instead of a fresh data which was different. This prevented me from fixing an issue which only my colleague discovered and for a minute we were confused with what was happening.This just remembered me to be careful next time when I’m thinking about caching things. It’s extremely important that you know when to invalidate cache. If you don’t determine that moment correctly you are about to put a nasty bug in your product and frustrate your users.* https://martinfowler.com/bliki/TwoHardThings.html" }, { "title": "Back to Heroku", "url": "/posts/back-to-heroku/", "categories": "software development, node.js", "tags": "software development, node.js, backend", "date": "2017-10-24 15:21:52 +0200", "snippet": "A year and a half ago I moved my backend service from Heroku to Openshift. The reasons were that it didn’t put services to sleep state in free tier. At that time it just looked it offers more for the same price. A month ago Openshift upgraded their service from version 2 to 3, or something like that. They wanted me to do the migration of my service. This is what happened next :) …Migrate!I had little to no will to do any work for this service again. Especially the maintenance work which adds no features and was basically doing someone else’s work. As it wasn’t that important and hadn’t that many users I was considering leaving the service to die. After a few days and email notifications from Openshift that I need to migrate, I decided to give it a try.Their tutorial was very short and at first I liked that, but only when I started working realized it’s just a bad tutorial, short and inaccurate. So I digged deeper trying to understand what needs to be done. As the last step I needed to create a new database, which wouldn’t be a problem if I didn’t need to learn all their nomenclature and architecture. I remembered the same service I had been running on Heroku before might still be alive.To HerokuIndeed, as I logged in to Heroku I saw my service was switched to maintenance mode. A simple button click put it to being active. An issue I had before with service being put to idle state after some time of inactivity I solved by using cron jobs as Heroku imagined it. After that I updated my client applications pointing to the new (old) endpoint and voila!The reason for this post is to remember myself that I like Heroku better. To say that I want the software to live longer without needing for “migrations”. This is something I don’t like from the backend service providers, even though I’m using a free plan, would you please leave my service working as it was. And that was my main reason to do actual work, I felt sad seeing it die." }, { "title": "Developers and UI texts", "url": "/posts/developers-and-ui-texts/", "categories": "software development, opinions", "tags": "software development, opinions", "date": "2017-02-26 21:17:19 +0100", "snippet": "This post is inspired by uninformative user facing texts in software. Being a software developer, I know that there are situations when we are not aware of how meaningless the text we write can be to the rest of the world. This is an excuse post to all the users affected by such messages and also a reminder to other developers that they should be careful how they communicate with their users.A perfect worldIn a perfect software development world, there are professional content writers and all the user facing texts are approved by them. This covers all the possible screens, information and error messages that can be shown to users. Developer not only doesn’t need to write the string himself, he doesn’t need to worry about the content or even the language of the text. Of course, in this world content writer fully understands the software product, context and message he needs to present to users. He can easily translate technical language we as developers communicate to a non-technical language the rest of the world understands.The real worldIn the real world situation is a bit different. Even if you are lucky enough to have a content writer for your software, you most probably had a situation where you had to write the text on your own. In this situation, when writing program code at high speed you just don’t give that much attention, or don’t shift to non-tecnical way of thinking for just that small “detail” such as user facing text message. I’m aware of this situation, but it’s certainily not an excuse. This situation requires to break out from technical way of thinking and put yourself in a situation of your user. Only then you’ll have a chance to write an informative text that your users will find useful. Here are some how-tos for writing user interface texts on MSDN.The best ofInstead of picking only a few of “the best of” texts, here’s a link to some good examples of what this post was all about." }, { "title": "I stopped reading news sites", "url": "/posts/i-stopped-reading-news-sites/", "categories": "personal, opinions", "tags": "personal, opinions", "date": "2017-01-10 17:22:07 +0100", "snippet": "Yes, it’s good to be informed and know what happens in the world around you. Yes, website news are the fastest, the most easily consumed and allow its audience to have conversation on the subject. But the news sites are broken and I can’t read them anymore.InformationEver since I use the Internet I got used to read news on the web instead of newspaper or TV. It really is the fastest and easiest way to stay informed. And you are not limited to only two or three TV channels and their strict schedule. You can find the good authors that you trust, and there are user comments on the article to give another opinion on the subject. Let’s forget for now that most of those users are simply trolls and their conversations usually end up in meaningless offending. Still the web is a great platform for news consumption.Who pays it?The big problem of the web is that it’s free to use for everyone. How could that be a problem? Because websites need to make money somehow, and the way most of them do it is by putting the ads on the site. I don’t care about the ads if they let me use the web. But as the web developed, or rather, sites wanted to develop its revenue, the ads became more and more intrusive. They often cover the whole screen, you can’t dismiss them for a few seconds or worse, they have sound. In these cases I used to immediately leave the site and just stay uninformed.Click bait sitesBut still I was reading the news sites while getting irritated by this kind of ads from time to time. Then one by one, the news sites started a new practice – writing an article title just to make you click it. The click bait sites. Wow, I might just call them like that from now instead of news sites. It doesn’t matter anymore if an article is true or not, is it relevant, is it worth the media exposure, does it start a war somewhere, the only thing that matters is number of clicks it will get and ad views it will generate. Before you could stay informed just by reading the titles, but that didn’t generate enough ad views I suppose. So you may ask if it’s really that hard for me to click on a title to read the article, it’s just a click away. No, it’s not about the click, it’s that many times I clicked on a title which looked interesting to me just to find out that it’s not the news I expected to read. I felt being fooled. Denzel Washington said it all here, I encourage you to watch it.How to thenI didn’t have one deciding moment and stop visiting the news sites, but each time I wanted to I had less will to do so. I didn’t want to be fooled again. Now I can say that for a few months I don’t visit those sites and I’m feeling fine. Sometimes I don’t know about some news, but if they are really important they reach me in other ways, like talking to people. I listen to the radio while working and they have great, short and informative news. The news sites as they are now, with their only purpose to generate more clicks, making you view more ads, are not usable to me." }, { "title": "Using Toshl finances", "url": "/posts/using-toshl-finances/", "categories": "personal, opinions", "tags": "personal, opinions, finances", "date": "2016-06-15 20:17:17 +0200", "snippet": "It has been four years since I started using Toshl for managing my personal finances. What I liked the most about it is it’s simplicity. While simple, it still lets you categorize your finances as complicated as you want. The most informative way I use Toshl is to track how much I spent or saved during a given period and on what categories did I spend the most. The reason they always supported a wide variety of platform also pleased me, especially since I’m a user of much smaller Windows Phone platform. But even if you use a platform they don’t support, there’s always their recently updated web application toshl.com." }, { "title": "I&#39;ll miss Windows Phone", "url": "/posts/i-ll-miss-windows-phone/", "categories": "personal, windows phone", "tags": "personal, opinions, windows phone", "date": "2016-06-15 19:58:32 +0200", "snippet": "Time is moving fast, it seems like yesterday I got my first Windows phone. It was so exciting to have a bold new platform after getting bored by iOS and Android. More than four years later, Windows Phone was left out on the cold to die on its own.A third platformWhat I liked the most when Windows Phone was first introduced is that it was different. It had many things that other, better platforms didn’t have. I appreciated the whole platform was designed with a smartphone in mind. Big live tiles vs. small static icons, big fonts instead of small, swipe actions instead of buttons, browser address bar at the bottom instead at the top. There were also concepts like hubs which really helped you do the desired actions faster than on other platforms. You can check smoked by windows phone videos and see what was that about. The time was now for Microsoft to try and put Windows Phone devices into people hands.How (not) to grow market shareMany people either immediately liked all this different stuff, or they didn’t understand and didn’t want to bother to learn, and that’s where I think (fixing) problems started. Microsoft wanted to keep the platform as it is, different than other and let users learn it. Nokia at that time on its own did really good job on innovating and promoting its Lumia line of phones. But as it turned out, people weren’t willing to learn the new platform, most of them got the Windows Phone because it was affordable and at that time more performant than cheap Android phones. While Microsoft did work on the platform, it didn’t change the look and feel of the platform. All that users saw was leaving WP7 without upgrade, then in 8.1 introducing Cortana and other PC-shared functionality. During this time cheap Android phones got better and there were less reasons for users who didn’t care about apps to choose Windows Phone and market share got stagnating before even taking off.Windows 10Many things happened that affected Windows Phone’s fate, Nokia acquisition, Microsoft CEO change, Windows 10. All these were quite a burden during the time that was crucial for Windows Phone to take off. Microsoft got bored of all this catch-up game and started to focus more on PCs where it had it’s strongest impact. They now wanted to make one OS for all devices that are interested in running it. Phones were now less important, they didn’t want to sell hardware and wanted to leave it all to OEMs. Now, almost a year after Windows 10 release, it’s still not very usable on the phone, it’s simply not a phone OS, not competitive with iOS, Android or even Windows Phone. They hope to make it better next year, but that’s quite some time for Microsoft to change it’s mind again. Terry Myerson says Windows Phone because of its small user base is not the platform to do cool new things at the moment, and that basically sums it all. And here’s a really good article that made me write this post.What’s nextFor Windows Phone a long and sad death by abandonment. For Windows 10 a hope that it will eventually become a good platform for smartphones. But since Microsoft hopes to get started working on it next year then who knows when and if this will ever happen. For me it will be either iOS or Android. I used both of them before and I’m not happy having to return to one of them, but at the moment we don’t have the third platform like we did with Windows Phone five years ago." }, { "title": "Xamarin.Forms hands on", "url": "/posts/xamarin-forms-hands-on/", "categories": "software development, xamarin", "tags": "software development, xamarin, windows phone, android", "date": "2016-05-05 23:59:03 +0200", "snippet": "For some time I wanted to try Xamarin for multi platform mobile app development. Recently I got very basic app idea suggested by a friend and it looked like a perfect excuse to finally try Xamarin. Of course that Microsoft recent acquisition of Xamarin and giving the technology to developers for free gave me more reasons to do it.Xamarin + Visual StudioFirst things first, I installed Xamarin for Visual Studio and created a new project. In the solution there were Android, iOS, Windows 8 Store and Windows Phone 8.1 apps. I can’t say I was surprised that there was no Windows 10 UWP app, even though I read there is support for Xamarin, maybe it’s too early to abandon Windows (Phone) 8. I didn’t read much of a documentation, but rather learned from code. There was one share component in which you can put all the shared stuff, from DB, networks calls to UI written in XAML. Since my app was so basic and I really wanted to make use of write once run everywhere slogan, I wrote a share page in XAML. There were some usual Android struggles, from installing the SDK, setting up the emulators, to java.lang.OutOfMemoryError: Java heap space error but eventually I got it working. When I realized I was writing C#/XAML code to run on Android it felt like magic, I couldn’t believe this all works. But soon after I decided the app is ready for testing on a device, I just plugged it in and deployed from Visual Studio, it felt so natural. Just to mention I didn’t try iOS because I don’t have an access to a Mac.OneSignalMy app needed the push notifications service. I already imagined writing a Node.js service for this, but before I started that I investigated about existing services which I could use. OneSignal seemed like a good option, it provided the needed functionality, had good documentation, SDKs for many platforms and was free. I started to work with it, and didn’t regret, I got push notifications working rather quick.ConclusionOf course, main disadvantage of Xamarin.Forms is the number of UI controls you have at your disposal. This means Xamarin.Forms can’t really be used for any advanced application with much UI customizations. And that’s OK, for that purpose there’s pure Xamarin where you can write UI natively on each platform. But for what it meant to be, a faster way to build simple apps for multiple platforms or a prototyping tool Xamarin.Forms works really well.My most negative surprise was that Windows Phone was least supported by Xamarin.Forms. I mean, it’s C#/XAML after all and one would expect it works the best for Windows, but when you think about it you can understand that there’s no reason for Xamarin team to make extra effort to support Windows Phone developers who already can develop using C#/XAML. Their main target is iOS and Android and I think they’ve done a great job implementing all that stuff, from Mono, Google Play Services, I-don’t-know-what for iOS, to UI layer and supporting XAML on all three platforms." }, { "title": "Migrating from Google App Engine", "url": "/posts/migrating-from-google-app-engine/", "categories": "software development, node.js", "tags": "software development, node.js, google app engine, backend", "date": "2016-02-23 17:05:31 +0100", "snippet": "As you might have read in my first blog post, I built a push notifications server on Google App Engine. It was nearly three years ago and at that point it looked nice to me to build a server in Java, deploy it on Google’s service and not have to pay a cent for it. Recently a few requirements arose and while I didn’t want to make the effort of whole service migration, I eventually did it. Here I’ll write what were the reasons for that and how I managed to do it safe and simple.In the beginningThere was a server, and server served users with push notifications, and server would often exceed the Google App Engine quotas. Look at this page, there are so many limits it’s really hard to imagine which one you’re gonna hit. For example, sometimes I would hit a datastore operations limit. It’s set to 50,000 operations per day. Now you may think that one datastore operation is one read/write from database, and you’d be wrong. There’s a table on this page which describes it in detail, but again, it was a hard time computing how many requests you can get for free. While fixing the problem and trying to minimize the database operations number I noticed a note:  Datastore operations generated by the Datastore Admin and Datastore Viewer count against your application quota.It means just browsing the data in the admin dashboard can make your app go out of quota limits. Not very nice, but what can you do, I understand that Google has to get the data from database for admin as well as for users. In the meantime I managed to keep the datastore operations under the quota and learned not to browse the data manually that much.Fear of quotasFor some time everything was fine until application got more users and hit another limit, this time 3,000 HTTP requests/minute. While it was not hard to make the app sleep for a minute when it hit the limit, now I had a real fear of quotas, looking into which one I’m going to hit next. Now you may argue that I could research the quotas better before even implementing the service, but just look at quotas and pricing pages again, it’s not really possible for an app in the making to know all those numbers to compute the pricing. Another remark may be why not pay for it - simply because I didn’t want to pay for something I didn’t have to. The whole server was a basic thing and I rather adapted its behavior to keep it in free tier. I understood this like my pay for the work I did as a hobby project and I liked that feeling more than paying for not doing what I love to do - software development.The technologyLet me write a few thing about the technology on the App Engine. While in essence it was Java, Google introduced quite a few own principles in it. For example I had to use their own URL Fetch service for making a simple HTTP requests. This meant that a same thing could work OK in your local environment, but it would fail in production. Another big new thing was the Google Query Language (oh, the name) which not being full SQL had serious limitations. Again, as my service wasn’t that much special and advanced I could adapt and use the imposed technology.Now whatFast forward to one month ago and I got a requirement to implement one new API on the server. I knew something was happening with Google App Engine as the dashboard didn’t look as before, some menu items were crossed over and there were notes to switch to the new dashboard. I understood there were quite a few changes and it was rebranded to Google Cloud Platform. Ok, I wasn’t really interested in all the changes, I just wanted to implement the new functionality. So I tried to deploy the new version, but it simply didn’t work, the tutorials written a few years ago don’t work today and there are no migration guides for use old users. That did it and I decided to move away from the whole thing and implement it all from scratch and deploy it somewhere I’ll have more control. Node.js againAs I played with Node.js recently the decision was simple. For a service that served quite a few requests, with no internal processing needs and one which I could implement rather fast, Node.js looked like natural choice. And it was, I built a service in a few days of my free time development. I decided to deploy it on OpenShift as it provided a simple and easy to understand pricing and deployment documentation. I admit there were a few issues when something didn’t work in production due to incompatible node modules, but I managed to fix them and learned about importance of versioning.Migration planI had a few options on how to migrate the data from one platform to another, but since I couldn’t deploy to App Engine any more, I had to think about recreating the data first. So that’s what I did, all the clients had to send its data to the new server and delete it from the old one. Luckily I implemented the delete endpoints on the old server so the users don’t get the notifications from both of them. For the first week only me used the new migrated client to see if any new problem pops up. After that I released the client apps one by one to the public, driven by number of users ascending. It’s now almost a week after the complete migration and all I can say is everything works and I’m happy to have the server under more control than it was on App Engine." }, { "title": "Cordova for Windows 10 troubles", "url": "/posts/cordova-for-windows-10-troubles/", "categories": "software development, windows", "tags": "software development, windows, cordova", "date": "2016-01-28 16:51:59 +0100", "snippet": "One of my recent tasks at work was to port a mobile web app to Windows 10 UWP. The app was built using Apache Cordova, and as Cordova and Microsoft worked together to support Windows 10, this should be pretty straightforward. Nobody really expected it to be as simple as it was advertised, and I was ready for the multi platform development troubles.cordova platform add windowsFirst things first, go to Cordova website, read some documentation on how to add a platform and create a project to start working. Ok, platform added, Windows UWP project created and I was ready to start the app. After a few days (yes, days), of html and web problems solving I finally had the app running. Now this was just the web part of the app, without the native plugins that the app needed. Some of the plugins were available and some of them didn’t support Windows. For those we agreed to not use them at the moment, but there was one custom built plugin which we really needed to have – Parse SDK which was used for push notifications.ParseI used Parse SDK on native Windows (Phone) 8 applications before and knew how to work with Parse. The first problems started when I realized Cordova for Windows 10 is not using .NET C#/XAML, but JavaScript app. So the Parse .NET SDK couldn’t be used here. Ok, Parse also provides other SDKs as well as REST API for communication so I was ready to adapt. I went on by adding the JavaScript SDK to the app, but nope, it can’t be used on a client for push notifications. It simply doesn’t have the needed functionality like registering the device for receiving push notifications. The JavaScript SDK was built mainly for server side and Parse Cloud Code implementation.Ok, but I knew this is a Windows UWP app, it should be able to execute some .NET code. I went on researching how to create a native Cordova plugin for Windows 10 and found out that although they were intended to be written in JavaScript using WinJS, there was also an option to have .NET native plugins written as Windows Runtime Component. Until then I wasn’t familiar with those kind of projects, after all I never really worked with multi-platform technologies, but rather developed native Windows apps. So this Windows Runtime Component is something like Class Library, but much more restrictive as it can be consumed by languages outside the .NET world. So I created one such project, added the Parse .NET SDK reference, and packed it all in a Cordova plugin. The app was working! Push notifications coming! Let me just mention Parse .NET SDK doesn’t support the Windows 10. But as it was open sourced recently I modified it a bit and was able to make it work eventually..NET nativeLet’s pack this up and submit to the store, I said. Not so fast, Windows App Certification Kit replied. Apparently I was using some unsupported APIs coming from some suspicious .DLLs. A quick google search pointed that I wasn’t using .NET native compiler. It’s a new thing from Windows 10, in short it means apps are compiled to machine code and as such distributed to the store. Advantages being smaller app packages, faster downloads and installations. Ok, but why it wouldn’t use the .NET native, why do I need to enable it myself and where do I do it? I compared the .jsproj created by Cordova, and .csproj created by Visual Studio when you create a plain Windows 10 app from the template. The native app had a directive &amp;lt;UseDotNetNativeToolchain&amp;gt; which my Cordova app didn’t have. Now I wasn’t sure if that was intentionally missing as Cordova app wasn’t a .NET app, so maybe it didn’t even need the .NET compilation. But I tried with it and wow, the unsupported API error was gone. One small win for me against Cordova bugs.Now I had the .appx package which was passing the WACK tests and went to submit it to the store. The Dev Center then said: “You cannot submit pre-compiled .NET Native packages. Please use .appxupload file for store submission”. Hm, Ok I know what the .appxupload file is, a simple zip with .appx file inside, but the Visual Studio didn’t create one for me. And for Windows 8 apps I used .appx files for store submission fine. Now how do I get the .appxupload manually? After quite a bit googling I found about MSBuild tool which is used internally by Visual Studio to create app packages. It was hard to find any related documentation on how to use it to produce .appxupload file, but some more googling I came across this blog post which helped me to finally create a .appxupload file. All right, store submission went fine (not immediately, but I’ll skip boring parts), the app was in store. Installed it, tried to get push notifications but no, they are not coming and device is not registering on Parse to receive them. Seems like my Parse plugin wasn’t working. Unpacking my .appxupload and .appx file inside it, I saw there were no Parse .DLLs inside. Somehow in debug build mode they are packed, but in release they are not. Here’s my StackOverflow question which remains unanswered at the time of writing this post which explains it a bit better. Team from Visual Studio Cordova Tools tried to answer but couldn’t really help me solve the issue.HTTP to the rescueI suspected the .DLLs couldn’t be used in Windows Runtime Component and .NET native combination, but never got any errors or found it documented anywhere. All the Windows Runtime Component plugin examples were rather simple and weren’t really helpful for my case. I tried to see what happens when I convert the Parse SDK to Windows Runtime component – it was bloody, red error symbols everywhere. It would be a project itself fixing it all up with no guarantee it would be possible and worked at all. Although I tried for quite some time to make this work in release mode as it did in debug, eventually I went by yet another approach – Parse REST API. Official documentation stated push notifications could be used only by native client SDKs. Device push notification registration was done by the SDK and Parse own logic on server side. Nevertheless, I tried to emulate the native SDK via the REST API by creating device installation objects “by force” (a HTTP POST request really). I didn’t expect it to work so simple, but it did! Device was registering fine, push notifications were working again. Ok so I implemented the device registration logic, a few methods regarding the channel manipulations that we needed and push notification handling in JavaScript and it was ready to go.All right, finally I could get rid of all the .DLLs and .NET native troubles. I packed it all again, submission to the store went fine, and the app was working this time. I even tried to utilize native Cordova commands for project build, but with no luck. It’s so utterly broken that it messes up .appxmanifest file by unnecessarily changing the Application Id property to invalid value. That’s the sad state of Cordova for Windows 10, it’s not finished, undocumented, and not ready for production use. Cordova Tools for Visual Studio that’s advertised by Microsoft is not what would you expect, tools for building Windows apps using Cordova. Rather it is a Visual Studio extension which enables you to build Cordova based iOS and Android apps together with Windows in one IDE. That should not come as surprise, but just one more indicator that Microsoft now focuses (too much) on building iOS and Android apps while leaving Windows app development unfinished." }, { "title": "You should use your apps", "url": "/posts/you-should-use-your-apps/", "categories": "software development, opinions", "tags": "software development, opinions", "date": "2015-12-07 23:17:15 +0100", "snippet": "Building software can be exhausting. Always trying to improve it by adding features, fixing bugs and maintaining code quality in the meantime. There are a lot of methodologies software developers incorporated in their workflow in order to improve the software development process. Be it by starting with prototyping, wireframes, software design, automated or manual testing. Still, there is one methodology that is rarely mentioned, but it could significantly help you make better apps - using them.How it’s used?Just to be clear, I’m talking about the apps that makes sense to use in your free time. Not the big enterprise software you build on your day job and maybe can’t even access from outside your workplace. But for your own apps, the ones that you own in every aspect, this is an easy and necessary thing to do. In case the app is not so usable to you, you should try and put yourself in a position if its user. Each day a new feature or bug fix is made, go through the app and just use it. From my own experience in building software I can witness that the apps I’m most proud of are those I use myself. The reason is that the details that could make your app stand out is hard to catch, especially with something like automated tests. When you use the app, you can notice some things you couldn’t as a developer or a designer. Maybe the new feature doesn’t work that good as it looked in wireframes. Maybe it slowed down the whole app.Usability assurance?Don’t get me wrong, I’m all for automated tests and having a dedicated QA, but for small hobby projects that’s often not feasible. On the other hand, the cost of using your app shouldn’t be high. If it’s a mobile app you can probably use it while commuting or drinking coffee. And its benefits are many, from catching the bugs that neither automated tests nor testers could, to getting new ideas on how to improve the app. Be it a feature, UX, UI or code quality improvement." }, { "title": "Know your terminology", "url": "/posts/know-your-terminology/", "categories": "software development, project management", "tags": "software development, project management", "date": "2015-11-23 21:58:56 +0100", "snippet": "What’s the deal with Windows apps terminology? I know it got messed up and easy to confuse, especially when you are not inside the Windows world, and platform resets done by Microsoft in the last few years certainly didn’t help. But there are quite a lot people who should understand it and they don’t. They just don’t want to invest that little time needed to understand what they are working with, and that’s the reason for this post.The state of Windows appsSince I’ve been dealing with Windows (Phone) apps since they appeared, I can testify there was quite a lot of confusion with people who weren’t into the platform. Microsoft is once again resetting the platform, ditching the “Phone” part of the name for mobile OS and not providing any official name for it. I see this as their intention to make sure people understand that it’s the same one OS, one Windows 10. And while it really is one OS, one build can run on all kind of devices, people are now confused even more. Clients and project managers will say: “How do you mean it’s not Windows Phone? I want an app that runs on phones”.True storyI know there was at least one such confusion when Windows Phone 7 came around and client wanted an app for it. Now I’m not familiar if the client couldn’t communicate it well, or project manager didn’t bother to understand the requirement, but somehow a new project for Windows Mobile was created. You can see from example like this why it’s crucial that people who make decisions really understand the terminology they are dealing with.Not only WindowsUnfortunately, this kind of “I don’t care, get it done” attitude is not limited to Windows apps development, or software development at all. When you are dealing with some business, you should make sure you understand at least the basic terminology, there are simply no excuses. Especially when you want to do a project and make some money from it." }, { "title": "My first Node.js experience", "url": "/posts/my-first-node-js-experience/", "categories": "software development, node.js", "tags": "node.js, backend, software development", "date": "2015-10-26 21:20:25 +0100", "snippet": "Recently I got a requirement to create a proof of concept web application. Something not too complicated, two types of users can register, login and after that enter and view some data with file upload/download functionality. There was also a requirement for an admin page which can view and approve registered users. I had my hands free to choose the technology and tools to build it. Oh, and did I mention the deadline was in four days?Possible solutionsSince I had experience in Java web development and .NET client development and I like to say I’m technology agnostic, I was open for anything that would best suit the need. After some examination, I ended up with three options: Java, ASP.NET and Node.js. I always wanted to try Node, but didn’t think this was the right moment when I had less than four days to complete the project. And while I personally like the C# language the most, I didn’t work with ASP.NET. But the reason to dismiss it wasn’t that, but the fact I wasn’t able to create a free trial account on Azure, even if I gave my credit card number. Platforms like Heroku usually don’t support ASP.NET and I wasn’t ready to pay for hosting of an app that was only an MVP.For all these reasons I decided I’d try Play framework using Java. Their documentation looked nice and it seemed I could do the job fast and easy using the language I know well. So I created a new project and followed the guidelines to get it configured and start working. But soon I ran into typical Java problems, I was stuck in project setup, configuration problems, guidelines didn’t work for me, something somewhere wasn’t installed properly. After fixing one problem, another would come up and I soon realized I could loose a lot of time just to get the project started. That’s when I decided I would give up on Java and try this hot new thing – Node.js.Node.jsI did know the theory behind Node.js, I also had some experience with JavaScript, but I was ready to learn a lot of new things. I started by following Heroku guidelines and had the project set up in a few minutes. I was really amazed how little code was needed to get the application running. I decided to concentrate on front end and didn’t bother with data persistence at first. I liked the Jade template engine and was able to do stuff quickly even if I haven’t seen it before. After I had the routing and screens set up, I turned to find a solution for data persistence. I knew there was a MongoDB option which works good with Node.js applications, but I thought a good old SQL would fit the need the best. Another reason was that I had enough new technologies for these few days. So I chose the PostgreSQL database and Sequelize ORM. I was able to get it working very fast, but I wish Sequelize had a better documentation. The Heroku part was easy enough, creating a database and connecting to it was all done in a few minutes.So there it was, a production ready application built in four days in technologies I didn’t work with before. I don’t have to say I felt proud and also happy that Node.js exists and only look forward to building more applications like this. Well, with more reasonable deadline if possible." }, { "title": "Working with manipulation events on Windows Phone", "url": "/posts/working-with-manipulation-events-on-windows-phone/", "categories": "software development, windows phone", "tags": "software development, windows phone", "date": "2014-10-22 22:10:37 +0200", "snippet": "Recently I worked on a Windows Phone app that had to allow users to move objects on the screen. More precisely, users would need to drag images on either left or right side. So, I just went by putting Image into a Border with CompositeTransform and then listened to Manipulation events. The thing I noticed is that it just isn’t really smooth, had a lag and I didn’t want users to have that experience. Then I tried another method, using the Touch.FrameReported event as I read it is a lower level API and should work smoother. The results were better, but still not perfect, and I knew there had to be a better way to do it as I saw other apps which had it done right. After looking into a source code of a few samples I found, I came across the WPToolkit source code and samples. Then looking into a GestureSample I found a comment inside .xaml file: Unlike in the WP7 toolkit sample, these event handlers need to be on the containing grid, rather than on the element itself, because calculations for these events are done within the coordinate space of the element, rather than screen coordinate space, which will create incorrect values compared to the user’s expectations when the element has been scaled or rotated.So there it is, because of a change between WP7 and WP8 and moving from GestureListener in WP7 Toolkit to built-in gesture events in WP8, this had to be implemented a little bit different. After applying changes to my code the results were just perfect. Perfectly smooth dragging of images, just as you would expect on Windows Phone.I’m not sure if this change is documented anywhere in the official documentation, but sometimes it’s not bad to look directly into source code and see how it works." }, { "title": "Sending push notifications with Google App Engine", "url": "/posts/sending-push-notifications-with-google-app-engine/", "categories": "software development, windows phone", "tags": "software development, windows phone, google app engine, backend", "date": "2014-05-01 22:17:48 +0200", "snippet": "When I built a Windows Phone application for local weather forecast it was naturally to implement push notifications – because you know how hard it is for users to manually check if new weather information is available. So, the question was how to do it – simple, fast and for free?SolutionThere’s a service from Google called App Engine which enables you to make web applications in Java or Python and host them on their servers for free. There are a lot of constraints which they had to make in order to make it free to use for everyone, but for application of this purpose there weren’t too many obstacles to make it work.ProblemsI won’t write about building a web application here, but rather about a problems I came across. So, once I’ve made it and put it to service it was working OK before first problem came up – a request to send notifications was taking too much time. Google App Engine runs applications in a sandbox environment which means you don’t have much freedom there. The constraint that was a problem was that each request has only 60 seconds to finish before it’s terminated. As I knew that sending a notification usually doesn’t take too long, only a fraction of a second I was thinking that even with thousands of users it shouldn’t be a problem. But, as I looked at the logs I saw that sometimes it takes a few seconds and then it fails. That’s when URL is not available and notification is not possible to send. There’s nothing you can do about it because Microsoft is responsible for delivering notifications to users. But here are a few things you can do about this problem: When a notification URL of a user changes, delete old URL. Not only because it will clear unnecessary data, but it will also make sending notifications faster because your server won’t be trying to send a notification to an old URL. Use asynchronous requests. All requests to external resources go through URL Fetch service, but it allows you to fetch URLs asynchronously. You should use that feature not to block your thread when calling thousands of notification URLs. One thing to remember is that a request has only 60 seconds to finish and no thread cannot outlive a request that started it. Don’t delete URLs that failed once. I thought that URL that failed is safe to delete because it’s not working and it’s probably some old URL. That was wrong as it lead to deletion of a lot of URLs that were active and users couldn’t receive notifications until their URL changed. In general Google App Engine works great for this purpose. It’s simple to use, reliable and free, but it has quite a lot of limitations which could make a problem for some other application. This is understandable because even Google doesn’t have unlimited resources and when you use something for free, you don’t really have the right to complain about it :)" } ]
